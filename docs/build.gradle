plugins {
    id 'groovy'
    id 'org.asciidoctor.jvm.convert' version "$asciidoctorGradleVersion"
}

version = projectVersion

ext {
    isReleaseVersion = !version.endsWith('SNAPSHOT')
    datastoreGithubBranch = '9.0.x'
    checkoutDirName = 'checkout'
    explicitGormSrc = System.getProperty('gorm.src') ?: findProperty('gorm.src')
    gormSrc = (explicitGormSrc ? file(explicitGormSrc) : "$checkoutDirName/gorm-src") as String
    zipFile = 'build/source.zip'
    coreProjects = ['grails-datastore-core', 'grails-datastore-gorm']
}

configurations {
    documentation {
        attributes {
            attribute(Bundling.BUNDLING_ATTRIBUTE, (Bundling) (objects.named(Bundling, 'external')))
        }
    }
}

tasks.register('resolveMongodbVersion') {
    group = 'documentation'
    description = 'Resolve MongoDB Version from the BOM'
    ext.resolved = configurations.compileClasspath
            .resolvedConfiguration
            .resolvedArtifacts
            .find {
                it.moduleVersion.id.group == 'org.mongodb' &&
                it.moduleVersion.id.name.contains('mongodb-driver-sync')
            }.moduleVersion.id.version
    logger.lifecycle('Resolved MongoDB Driver version for Guide links: {}', resolved)
}


dependencies {

    documentation platform("org.grails:grails-bom:$grailsVersion")
    documentation 'org.fusesource.jansi:jansi'
    documentation 'org.apache.groovy:groovy'
    documentation 'org.apache.groovy:groovy-templates'
    documentation 'org.apache.groovy:groovy-dateutil'
    documentation 'com.github.javaparser:javaparser-core'
    coreProjects.each {
        documentation "org.grails:$it"
    }
    rootProject.subprojects
            .findAll { it.findProperty('apiDocs') }
            .each { documentation project(":$it.name") }

    // These are added to be able to resolve the mongo version from grails-bom
    // in the resolveMongodbVersion task
    implementation platform("org.grails:grails-bom:$grailsVersion")
    implementation 'org.mongodb:mongodb-driver-sync'
}

asciidoctor {
    baseDirFollowsSourceDir()
    attributes('experimental': 'true',
               'compat-mode': 'true',
               'toc': 'left',
               'icons': 'font',
               'reproducible': '',
               'version': projectVersion,
               'pluginVersion': projectVersion,
               'mongoDriverVersion': resolveMongodbVersion.resolved,
               'sourcedir': "$project.rootDir")

    jvm {
        jvmArgs('--add-opens', 'java.base/sun.nio.ch=ALL-UNNAMED', '--add-opens', 'java.base/java.io=ALL-UNNAMED')
    }
}

tasks.register('fetchSource') {

    // These are used to determine if the task is UP-TO-DATE
    outputs.dir(layout.buildDirectory.dir(checkoutDirName))
    inputs.property('branch', datastoreGithubBranch)

    onlyIf {
        // Only download if no local GORM source is provided
        return !explicitGormSrc
    }

    doLast {
        def checkoutDir = layout.buildDirectory.dir(checkoutDirName).get().asFile
        ant.mkdir(dir: layout.buildDirectory.get().asFile)
        ant.mkdir(dir: checkoutDir)
        logger.lifecycle('Downloading GORM source code...')
        def ref = isReleaseVersion ? "tags/v$datastoreVersion" : "heads/$datastoreGithubBranch"
        ant.get(src: "https://github.com/grails/grails-data-mapping/archive/refs/${ref}.zip", dest: zipFile, verbose: true)
        ant.unzip(src: zipFile, dest: checkoutDir) {
            mapper(type: 'regexp', from: '(grails-\\S*?/)(.*)', to: "gorm-src/\\2")
        }
        logger.lifecycle('GORM source code downloaded!')
    }
}

tasks.register('copyDocs', Copy) {
    dependsOn('asciidoctor')
    mustRunAfter('asciidoctor', 'groovydoc', 'copyResources')
    finalizedBy('cleanAsciidoc')
    from(layout.buildDirectory.dir('docs/asciidoc'))
    into(layout.buildDirectory.dir('docs/manual'))
}

tasks.register('cleanAsciidoc', Delete) {
    delete(layout.buildDirectory.dir('docs/asciidoc'))
}

tasks.withType(Groovydoc).configureEach {
    dependsOn('fetchSource')
    docTitle = "GORM for MongoDB - $project.version"

    def sourceFiles = coreProjects.collect {
        layout.buildDirectory.files("$checkoutDirName/gorm-src/$it/src/main/groovy")
    }.sum()

    rootProject.subprojects
        .findAll { it.findProperty('apiDocs') }
        .each { sourceFiles += it.files('src/main/groovy') }

    source = sourceFiles
    destinationDir = layout.buildDirectory.dir('docs/api').get().asFile
    access = GroovydocAccess.PROTECTED
    processScripts = false
    includeMainForScripts = false
    includeAuthor = true
    classpath = configurations.documentation
    groovyClasspath += configurations.documentation
}

tasks.register('copyResources', Copy) {
    from(layout.projectDirectory.dir('src/docs/resources'))
    into(layout.buildDirectory.dir('docs'))
}

tasks.register('docs') {
    dependsOn('asciidoctor', 'copyDocs', 'cleanAsciidoc', 'groovydoc', 'copyResources',
        rootProject.subprojects
            .findAll { it.findProperty('apiDocs') }
            .collect { ":${it.name}:groovydoc" }
    )
    finalizedBy('assembleDocsDist')
}

tasks.register('assembleDocsDist', Zip) {
    dependsOn('docs', 'copyDocs')
    from(layout.buildDirectory.dir('docs'))
    archiveFileName = "${project.name}-${project.version}.zip"
    destinationDirectory = project.layout.buildDirectory.dir('distributions')
}