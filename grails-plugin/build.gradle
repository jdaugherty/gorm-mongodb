plugins {
    id 'groovy'
    id 'java-library'
    id 'java-test-fixtures'
}

version = projectVersion
group = 'org.grails.plugins'

apply plugin: 'org.grails.grails-plugin'

ext {
    apiDocs = true
    pomArtifactId = 'mongodb'
    mavenSnapshotPublishUrl = 'https://repo.grails.org/grails/plugins3-snapshots-local'
}

dependencies {

    implementation platform("org.grails:grails-bom:$grailsVersion")

    api project(':grails-datastore-gorm-mongodb'), {
        // api: needed as classes should also be available when compiling apps. eg. MongoEntity
        // impl: MongoDatastore, MongoDbDataStoreSpringInitializer
        if (excludeUnusedTransDeps) {
            // API dependencies in grails-datastore-gorm-mongodb
            //exclude group: 'org.grails', module: 'grails-datastore-gorm-bson' // Needed at runtime downstream (BsonPersistentEntityCodec)
            exclude group: 'org.grails', module: 'grails-datastore-core'
            exclude group: 'org.grails', module: 'grails-datastore-gorm'
            exclude group: 'org.grails', module: 'grails-datastore-gorm-support'
            //exclude group: 'org.mongodb', module: 'bson' // Needed downstream for compiling MongoEntity
            //exclude group: 'org.mongodb', module: 'mongodb-driver-core' // MongoClientSettings
            //exclude group: 'org.mongodb', module: 'mongodb-driver-sync' // MongoClient
            exclude group: 'org.springframework', module: 'spring-context'
        }
    }

    implementation 'org.grails:grails-datastore-gorm-support', {
        // impl: ConfigSupport
        if (excludeUnusedTransDeps) {
            // API dependencies in grails-datastore-gorm-support
            exclude group: 'org.grails', module: 'grails-datastore-core'
            //exclude group: 'org.grails', module: 'grails-datastore-gorm' // AbstractDatastorePersistenceContextInterceptor
            exclude group: 'org.grails', module: 'grails-core'
            exclude group: 'org.springframework', module: 'spring-context'
            exclude group: 'org.springframework', module: 'spring-core'
        }
    }
    implementation 'org.springframework:spring-beans', {
        // impl: BeanDefinitionRegistry
    }
    implementation 'org.springframework:spring-context', {
        // impl: ConfigurableApplicationContext
    }
    implementation 'org.springframework:spring-core', {
        // impl: PropertyResolver
    }
    implementation 'org.springframework:spring-tx', {
        // impl: PlatformTransactionManager
    }

    compileOnly 'org.apache.groovy:groovy' // Provided as this is a Grails plugin
    compileOnly 'org.grails:grails-core', { // Provided as this is a Grails plugin
        // api: GrailsPlugin
        // impl: DomainClassArtefactHandler, GrailsClass, GrailsPlugin, Metadata
    }

    runtimeOnly project(':grails-datastore-gorm-mongodb-ext'), {
        // Include MongoDB groovy extensions for applications
    }

    testFixturesApi 'org.grails:grails-core', {
        // api: Config
        // impl: PropertySourcesConfig
    }
    testFixturesApi project(':grails-datastore-gorm-mongodb'), {
        // api: MongoDatastore
    }
    testFixturesApi 'org.mongodb:mongodb-driver-sync', {
        // api: MongoClient
    }

    testFixturesImplementation 'org.springframework:spring-core', {
        // impl: PropertyResolver
    }
    testFixturesImplementation 'org.springframework.boot:spring-boot', {
        // impl: PropertySourceLoader
    }
    testFixturesImplementation 'org.spockframework:spock-core'

    testFixturesCompileOnly 'org.apache.groovy:groovy'
}

def disabledTasks = ['bootRun', 'bootTestRun']
disabledTasks.each { taskName ->
    tasks.named(taskName) {
        enabled = false
    }
}

tasks.named('groovydoc') {
    source += sourceSets.testFixtures.allSource
}

apply from: rootProject.layout.projectDirectory.file('gradle/java-config.gradle')
apply from: rootProject.layout.projectDirectory.file('gradle/publish-config.gradle')